package com.razorpaypoc.service;

import java.util.List;

import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.razorpay.Order;
import com.razorpay.RazorpayClient;
import com.razorpay.RazorpayException;
import com.razorpaypoc.entity.PaymentStatus;
import com.razorpaypoc.repository.PaymentStatusRepository;

@Service
public class PaymentServiceImpl implements PaymentService {

    @Autowired
    private PaymentStatusRepository paymentStatusRepository;

    private RazorpayClient razorpayClient;
    
    // Constructor to initialize Razorpay client using injected apiKey and apiSecret
    @Autowired
    public PaymentServiceImpl(@Value("${razorpay.apiKey}") String apiKey,
                              @Value("${razorpay.apiSecret}") String apiSecret) throws RazorpayException {
        this.razorpayClient = new RazorpayClient(apiKey, apiSecret);
    }

    @Override
    public PaymentStatus createOrder(String name, String email, String mobile, int amount) {
        try {
            // Create a new order in Razorpay
            JSONObject orderRequest = new JSONObject();
            orderRequest.put("amount", amount * 100); // Amount in paise (convert from Rs to paise)
            orderRequest.put("currency", "INR");
            orderRequest.put("receipt", "txn_123456");

            // Create the order using RazorpayClient
            Order order = razorpayClient.orders.create(orderRequest);

            // Create and save payment status
            PaymentStatus paymentStatus = new PaymentStatus();
            paymentStatus.setOrderId(order.get("id"));
            paymentStatus.setName(name);
            paymentStatus.setEmail(email);
            paymentStatus.setMobile(mobile);
            paymentStatus.setAmount(amount * 100); // Store amount in paise
            paymentStatus.setStatus("CREATED");

            return paymentStatusRepository.save(paymentStatus);

        } catch (Exception e) {
            throw new RuntimeException("Error creating Razorpay order: " + e.getMessage());
        }
    }

    
    @Override
    public PaymentStatus verifyPayment(String orderId, String paymentId, String razorpaySignature) {
        try {
            // Fetch payment status from the repository using the orderId
            PaymentStatus paymentStatus = paymentStatusRepository.findByOrderId(orderId);
            if (paymentStatus != null) {
                // Verify the signature
                boolean isSignatureValid = verifyRazorpaySignature(orderId, paymentId, razorpaySignature);
                if (isSignatureValid) {
                    paymentStatus.setPaymentId(paymentId);
                    paymentStatus.setStatus("SUCCESS");
                } else {
                    paymentStatus.setStatus("FAILED");
                }
                // Save the updated payment status
                return paymentStatusRepository.save(paymentStatus);
            } else {
                throw new RuntimeException("Order not found");
            }
        } catch (Exception e) {
            throw new RuntimeException("Error verifying payment: " + e.getMessage());
        }
    }

    @Override
    public List<PaymentStatus> getAllPayments() {
        return paymentStatusRepository.findAll();
    }
}
